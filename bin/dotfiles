#!/bin/bash
set -e

readonly DOTFILES_DIRECTORY="${HOME}/.dotfiles"
readonly DOTFILES_GIT_REMOTE="https://github.com/kevva/dotfiles.git"
readonly DOTFILES_TARBALL_PATH="https://github.com/kevva/dotfiles/tarball/master"

# Parse options
parse_opts() {
	for opt in $@
	do
		case ${opt} in
			--help) help=true ;;
			--no-packages) no_packages=true ;;
			--no-sync) no_sync=true ;;
			-*|--*) log_warning "Warning: invalid option ${opt}" ;;
		esac
	done
}

# If missing, download and extract the dotfiles repository
check_dotfiles() {
	if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
		printf "$(tput setaf 7)Downloading dotfiles...$(tput sgr0)\n"
		mkdir ${DOTFILES_DIRECTORY}
		curl -fsSL ${DOTFILES_TARBALL_PATH} | tar -xzC ${DOTFILES_DIRECTORY} --strip-components 1
	fi
}

# Before relying on Homebrew, check that packages can be compiled
check_gcc() {
	if ! type_exists 'gcc' && is_os 'darwin'; then
		log_error "The XCode Command Line Tools must be installed first"
		printf "  Download them from: https://developer.apple.com/downloads\n"
		printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
		exit 1
	fi
}

# Check for Homebrew
check_brew() {
	if ! type_exists 'brew' && is_os 'darwin'; then
		log_header "Installing Homebrew..."
		ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi
}

# Check for git
check_git() {
	if ! type_exists 'git'; then
		if is_os 'darwin'; then
			log_header "Installing Git..."
			brew update &> /dev/null
			brew install git
		elif is_os 'linux'; then
			log_header "Installing Git..."
			sudo apt-get update -qqy &> /dev/null
			sudo apt-get install --allow-unauthenticated -qqy git-core
		fi
	fi
}

# Check for nvm
check_nvm() {
	if ! type_exists 'node'; then
		log_header "Installing nvm..."
		curl -fsSL https://raw.githubusercontent.com/creationix/nvm/v0.25.0/install.sh | bash
		source ${HOME}/.nvm/nvm.sh
	fi
}

# Check for node
check_node() {
	local version="iojs"

	if ! type_exists 'node'; then
		log_header "Installing node..."
		nvm install ${version}
		nvm alias default ${version}
	fi
}

# Initialize the git repository if it's missing
run_init() {
	if ! is_git_repo; then
		log_header "Initializing git repository..."
		git init &> /dev/null
		git remote add origin ${DOTFILES_GIT_REMOTE} &> /dev/null
	fi
}

# Conditionally sync with the remote repository
run_sync() {
	if [[ ${no_sync} ]]; then
		printf "Skipped dotfiles sync\n"
	else
		log_header "Syncing dotfiles..."
		git fetch origin master
		# Reset the index and working tree to the fetched HEAD
		# (submodules are cloned in the subsequent sync step)
		git reset --hard FETCH_HEAD
		# Remove any untracked files
		git clean -fd
	fi
}

# Install and update packages
run_packages() {
	if [[ ${no_packages} ]]; then
		printf "Skipped package installations\n"
	else
		if is_os 'linux'; then
			source ./lib/apt
			run_apt
		elif is_os 'darwin'; then
			source ./lib/brew
			run_brew
		fi

		source ./lib/npm
		run_npm
	fi
}

# Force create/replace symlink
link() {
	ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

# Copy and symlink files
mirrorfiles() {
	# Copy `.gitconfig`.
	# Any global git commands in `~/.bash_profile.local` will be written to
	# `.gitconfig`. This prevents them being committed to the repository.
	rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

	# Create the necessary symbolic links between the `.dotfiles` and `HOME`
	# directory. The `bash_profile` sources other files directly from the
	# `.dotfiles` repository.
	link "bash/bashrc"          ".bashrc"
	link "bash/bash_profile"    ".bash_profile"
	link "bash/inputrc"         ".inputrc"
	link "bash/jscsrc"          ".jscsrc"
	link "git/gitattributes"    ".gitattributes"
	link "git/gitignore"        ".gitignore"
}

# Ask before potentially overwriting files
confirm_dotfiles() {
	seek_confirmation "Warning: This step may overwrite your existing dotfiles"

	if is_confirmed; then
		mirrorfiles
		log_success "Dotfiles update complete!"
		source ${HOME}/.bash_profile
	else
		printf "Aborting...\n"
		exit 1
	fi
}

# Ask before potentially overwriting OS X defaults
confirm_osx() {
	if is_os 'darwin'; then
		seek_confirmation "Warning: This step may modify your OS X system defaults"

		if is_confirmed; then
			bash ./bin/osxdefaults
			log_success "OS X settings updated!"
		else
			printf "Skipped OS X settings update\n"
		fi
	fi
}

# Ask before potentially overwriting Ubuntu defaults
confirm_ubuntu() {
	if is_os 'linux'; then
		seek_confirmation "Warning: This step may modify your Ubuntu system defaults"

		if is_confirmed; then
			bash ./bin/ubuntudefaults
			log_success "Ubuntu settings updated!"
		else
			printf "Skipped Ubuntu settings update\n"
		fi
	fi
}

# Ask before potentially overwriting ST3 preferences
confirm_slt() {
	seek_confirmation "Warning: This step may overwrite your existing ST3 preferences"

	if is_confirmed; then
		source ./lib/subl
		run_subl
		log_success "ST3 preferences updated!"
	else
		printf "Skipped ST3 preferences update\n"
	fi
}

# Run
run() {
	# Check if dotfiles are installed
	check_dotfiles

	# cd into ~/.dotfiles
	cd ${DOTFILES_DIRECTORY}

	# Source utils
	source ./lib/utils

	# Parse options
	parse_opts "$@"

	# Show help
	if [[ ${help} ]]; then
		source ./lib/help
		run_help
		exit
	fi

	# Run checks
	check_gcc
	check_brew
	check_git
	check_nvm
	check_node

	# Init repo and sync files
	run_init
	run_sync

	# Install packages
	run_packages

	# Confirm before applying settings
	confirm_dotfiles
	confirm_osx
	confirm_ubuntu
	confirm_slt
}

run "$@"
